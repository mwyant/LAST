<!doctype html>
<html>
<head>
  <meta charset="utf-8"/>
  <title>Transcription Assistant</title>
  <script src="https://unpkg.com/wavesurfer.js"></script>
  <style>
    body { font-family: Inter, Roboto, Arial, sans-serif; margin: 20px; }
    .header { display:flex; gap:20px; align-items:center; }
    .metrics { margin-left: auto; }
    #waveform { width: 100%; height: 128px; background: #222; margin-top: 10px; }
    .controls { margin-top: 10px; }
    .progress { width: 100%; background:#eee; height: 12px; border-radius:6px; overflow:hidden; }
    .progress > div { height: 100%; background: #2b8aef; width:0%; }
    textarea { font-family: monospace; white-space: pre-wrap; }
    button, input[type="file"], input[type="text"] { margin-right: 8px; }
  </style>
</head>
<body>
  <div class="header">
    <h2>Transcription Assistant</h2>
    <div class="metrics" id="metrics">Loading metrics...</div>
  </div>

  <!-- Controls: separate Upload & Transcode and Start Transcription -->
  <div>
    <input id="file" type="file" accept="audio/*"/>
    <button id="upload">Upload &amp; Transcode</button>
    <button id="transcribe" disabled>Start Transcription (async)</button>
    <button id="download" disabled>Download Transcript</button>
    <a id="download_link" href="#" style="margin-left:10px; display:none;" download>Transcript file</a>
    <button id="reload-model">Reload Model</button>
    <input id="switch-model" type="text" placeholder="model name (optional)"/>
    <button id="switch-model-btn">Switch Model</button>
    <div id="status" style="display:inline-block; margin-left:10px;">idle</div>
  </div>

  <div id="waveform"></div>

  <div class="controls">
    <button id="play">Play</button>
    <button id="pause">Pause</button>
    <button id="stop">Stop</button>
  </div>

  <div style="margin-top:10px">
    <div class="progress"><div id="progressbar"></div></div>
    <pre id="log" style="height:200px; overflow:auto; background:#111; color:#ddd; padding:10px;"></pre>
  </div>

  <!-- Transcript text area (hidden until transcript available) -->
  <div style="margin-top:10px; display:none;" id="transcript_container">
    <label for="transcript_text">Transcript (copyable):</label><br/>
    <textarea id="transcript_text" style="width:100%; height:220px;"></textarea>
  </div>

  <!-- Text-to-Speech UI -->
<div id="tts_ui" style="margin-top:20px; border-top:1px solid #ccc; padding-top:12px;">
  <h3>Text â†’ Speech</h3>
  <textarea id="tts_text" placeholder="Enter text to synthesize..." style="width:100%; height:100px;">Hello. This is Izzy. Read me a line of your story and I'll say it back.</textarea>
  <div style="margin-top:8px;">
    <input id="tts_model" type="text" placeholder="model (optional)" style="width:300px;" />
    <button id="tts_synthesize">Synthesize</button>
    <button id="tts_play" disabled>Play</button>
    <a id="tts_download" href="#" style="margin-left:8px; display:none;">Download WAV</a>
    <span id="tts_status" style="margin-left:12px; color:#666;"></span>
  </div>
  <audio id="tts_audio" controls style="display:block; margin-top:8px; width:100%;"></audio>
</div>

<script>
const API = {
  upload: '/upload',
  transcribe: '/transcribe',
  status: (id)=>'/status/'+id,
  events: (id)=>'/events/'+id,
  download: (id)=>'/download/'+id,
  reload: '/admin/reload',
  switch_model: '/admin/switch_model',
  metrics: '/metrics'
};

let wavesurfer = WaveSurfer.create({container:'#waveform', waveColor:'#97b', progressColor:'#2b8aef', height: 120});
let currentFile = null;
let currentJob = null;

async function refreshMetrics(){
  try {
    let r = await fetch(API.metrics);
    if (!r.ok) { document.getElementById('metrics').innerText = 'Metrics: N/A'; return; }
    let j = await r.json();
    document.getElementById('metrics').innerText = 'Jobs: ' + j.jobs_created + ' | Done: ' + j.jobs_completed + ' | Failed: ' + j.jobs_failed;
  } catch(e){
    console.error(e);
  }
}

document.getElementById('file').addEventListener('change', (ev)=>{
  const f = ev.target.files[0];
  if(!f) return;
  currentFile = f;
  const url = URL.createObjectURL(f);
  wavesurfer.load(url);
  document.getElementById('transcribe').disabled = false;
  document.getElementById('status').innerText = 'file selected: ' + f.name;
});

// Upload (separate)
document.getElementById('upload').addEventListener('click', async ()=>{
  if(!currentFile){ alert('Choose a file first'); return; }
  const fd = new FormData();
  fd.append('file', currentFile);
  document.getElementById('status').innerText = 'uploading...';
  const resp = await fetch(API.upload, {method:'POST', body:fd});
  if(!resp.ok){ alert('Upload failed: '+resp.statusText); return; }
  const job = await resp.json();
  document.getElementById('status').innerText = 'uploaded; job_id: '+job.job_id;
  currentJob = job.job_id;
  listenEvents(currentJob);
});

// Transcribe (separate)
document.getElementById('transcribe').addEventListener('click', async ()=>{
  if(!currentJob) { alert('Upload first'); return; }
  const resp = await fetch(API.transcribe, {method:'POST', headers:{'content-type':'application/json'}, body: JSON.stringify({job_id: currentJob})});
  if(!resp.ok){ alert('Transcribe failed: '+resp.statusText); return; }
  const j = await resp.json();
  document.getElementById('status').innerText = 'transcribe submitted: '+j.job_id;
  listenEvents(j.job_id);
});

async function listenEvents(job_id){
  const es = new EventSource(API.events(job_id));
  es.onmessage = function(ev){ console.log('message', ev.data); };
  es.addEventListener('status', function(e){
    const data = JSON.parse(e.data);
    document.getElementById('log').textContent += 'STATUS: '+ JSON.stringify(data) + '\\n';
    refreshMetrics();
  });
  es.addEventListener('progress', function(e){
    const data = JSON.parse(e.data);
    document.getElementById('progressbar').style.width = data.progress+'%';
    document.getElementById('log').textContent += 'PROGRESS: '+ JSON.stringify(data) + '\\n';
  });
  es.addEventListener('done', function(e){
    const data = JSON.parse(e.data);
    const filename = data.filename || (data.result_path ? (data.result_path.split('/').pop()) : null);
    const link = document.getElementById('download_link');
    link.href = API.download(job_id);
    if (filename) {
      link.textContent = filename;
      link.style.display = 'inline-block';
      link.setAttribute('download', filename);
    } else {
      link.textContent = 'download transcript';
      link.style.display = 'inline-block';
    }
    document.getElementById('download').disabled = false;
    document.getElementById('download').onclick = ()=> { window.location = API.download(job_id); }
    document.getElementById('status').innerText = 'done: ' + (filename || data.result_path || '');
    fetch(API.download(job_id))
      .then(resp => { if(!resp.ok) throw new Error('Failed'); return resp.text(); })
      .then(text => {
        const container = document.getElementById('transcript_container');
        const ta = document.getElementById('transcript_text');
        ta.value = text;
        container.style.display = 'block';
      }).catch(err => console.warn('Could not fetch transcript text:', err));
    refreshMetrics();
    es.close();
  });
  es.addEventListener('error', function(e){
    try { const data = JSON.parse(e.data); document.getElementById('status').innerText = 'error: ' + (data.error || 'unknown'); document.getElementById('log').textContent += 'ERROR: '+ JSON.stringify(data) + '\\n'; } catch(_) {}
    es.close();
  });
}

// TTS: synth, play, download
const ttsTextEl = document.getElementById('tts_text');
const ttsModelEl = document.getElementById('tts_model');
const ttsBtn = document.getElementById('tts_synthesize');
const ttsPlayBtn = document.getElementById('tts_play');
const ttsDownload = document.getElementById('tts_download');
const ttsStatus = document.getElementById('tts_status');
const ttsAudio = document.getElementById('tts_audio');

let ttsBlobUrl = null;

async function synthesizeText() {
  const text = ttsTextEl.value && ttsTextEl.value.trim();
  if (!text) {
    alert('Enter some text to synthesize');
    return;
  }
  const model = ttsModelEl.value && ttsModelEl.value.trim();
  ttsStatus.textContent = 'Synthesizing...';
  ttsBtn.disabled = true;
  ttsPlayBtn.disabled = true;
  ttsDownload.style.display = 'none';
  if (ttsBlobUrl) { URL.revokeObjectURL(ttsBlobUrl); ttsBlobUrl = null; ttsAudio.src = ''; }

  try {
    const resp = await fetch(API.synthesize, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ text: text, model: model || null })
    });
    if (!resp.ok) {
      const errText = await resp.text().catch(()=>null);
      throw new Error(`Synthesis failed: ${resp.status} ${resp.statusText} ${errText||''}`);
    }
    const ab = await resp.arrayBuffer();
    const blob = new Blob([ab], { type: 'audio/wav' });
    ttsBlobUrl = URL.createObjectURL(blob);
    ttsAudio.src = ttsBlobUrl;
    ttsAudio.style.display = 'block';
    ttsDownload.href = ttsBlobUrl;
    ttsDownload.download = `tts-${new Date().toISOString().replace(/[:.]/g,'-')}.wav`;
    ttsDownload.style.display = 'inline-block';
    ttsPlayBtn.disabled = false;
    ttsStatus.textContent = 'Ready';
  } catch (err) {
    console.error('TTS error', err);
    ttsStatus.textContent = 'Error: ' + (err.message || err);
    alert('TTS failed: ' + (err.message || err));
  } finally {
    ttsBtn.disabled = false;
  }
}

ttsBtn.addEventListener('click', synthesizeText);
ttsPlayBtn.addEventListener('click', ()=> {
  try { ttsAudio.play(); } catch(e) { console.warn(e); }
});

document.getElementById('play').addEventListener('click', ()=>wavesurfer.play());
document.getElementById('pause').addEventListener('click', ()=>wavesurfer.pause());
document.getElementById('stop').addEventListener('click', ()=>wavesurfer.stop());

document.getElementById('reload-model').addEventListener('click', async ()=>{
  document.getElementById('status').innerText = 'reloading model...';
  const resp = await fetch(API.reload, {method:'POST'});
  const j = await resp.json();
  document.getElementById('status').innerText = 'reload: '+JSON.stringify(j);
});

document.getElementById('switch-model-btn').addEventListener('click', async ()=>{
  const m = document.getElementById('switch-model').value.trim();
  if(!m) { alert('enter model name'); return; }
  document.getElementById('status').innerText = 'switching to '+m;
  const resp = await fetch(API.switch_model, {method: 'POST', headers:{'content-type':'application/json'}, body: JSON.stringify({model_name:m})});
  const j = await resp.json();
  document.getElementById('status').innerText = 'switch: '+JSON.stringify(j);
});

refreshMetrics();
</script>
</body>
</html>
